import abc
import sys
from abc import ABC, abstractmethod
from datetime import (
    date as _date,
    datetime as _datetime,
    time as _time,
    timedelta as _timedelta,
)
from typing import ClassVar, Literal, TypeVar, overload

if sys.version_info >= (3, 9):
    from zoneinfo import ZoneInfo
else:
    from backports.zoneinfo import ZoneInfo

__all__ = [
    "Date",
    "Time",
    "UTCDateTime",
    "OffsetDateTime",
    "ZonedDateTime",
    "LocalSystemDateTime",
    "NaiveDateTime",
    "DateDelta",
    "TimeDelta",
    "DateTimeDelta",
    "years",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "microseconds",
    "SkippedTime",
    "AmbiguousTime",
    "InvalidOffsetForZone",
    "InvalidFormat",
    "MONDAY",
    "TUESDAY",
    "WEDNESDAY",
    "THURSDAY",
    "FRIDAY",
    "SATURDAY",
    "SUNDAY",
]

MONDAY: int
TUESDAY: int
WEDNESDAY: int
THURSDAY: int
FRIDAY: int
SATURDAY: int
SUNDAY: int

class _UNSET: ...

_TDateTime = TypeVar("_TDateTime")
Disambiguate = Literal["raise", "earlier", "later", "compatible"]

class Date:
    def __init__(self, year: int, month: int, day: int) -> None: ...
    @property
    def year(self) -> int: ...
    @property
    def month(self) -> int: ...
    @property
    def day(self) -> int: ...
    def __lt__(self, other: Date) -> bool: ...
    def __le__(self, other: Date) -> bool: ...
    def __gt__(self, other: Date) -> bool: ...
    def __ge__(self, other: Date) -> bool: ...
    def py_date(self) -> _date: ...
    @classmethod
    def from_py_date(cls, d: _date) -> Date: ...
    def add(
        self, *, years: int = 0, months: int = 0, weeks: int = 0, days: int = 0
    ) -> Date: ...
    def __add__(self, p: DateDelta) -> Date: ...
    def subtract(
        self, *, years: int = 0, months: int = 0, weeks: int = 0, days: int = 0
    ) -> Date: ...
    @overload
    def __sub__(self, d: DateDelta) -> Date: ...
    @overload
    def __sub__(self, d: Date) -> DateDelta: ...
    def day_of_week(self) -> int: ...
    def at(self, t: Time) -> NaiveDateTime: ...
    def canonical_format(self) -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> Date: ...
    def common_iso8601(self) -> str: ...
    @classmethod
    def from_common_iso8601(cls, s: str) -> Date: ...

class Time:
    MIDNIGHT: ClassVar[Time]
    NOON: ClassVar[Time]
    MAX: ClassVar[Time]
    def __init__(
        self,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        microsecond: int = 0,
    ) -> None: ...
    @property
    def hour(self) -> int: ...
    @property
    def minute(self) -> int: ...
    @property
    def second(self) -> int: ...
    @property
    def microsecond(self) -> int: ...
    def py_time(self) -> _time: ...
    @classmethod
    def from_py_time(cls, t: _time) -> Time: ...
    def __lt__(self, other: Time) -> bool: ...
    def __le__(self, other: Time) -> bool: ...
    def __gt__(self, other: Time) -> bool: ...
    def __ge__(self, other: Time) -> bool: ...
    def on(self, d: Date) -> NaiveDateTime: ...
    def canonical_format(self) -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> Time: ...
    def common_iso8601(self) -> str: ...
    @classmethod
    def from_common_iso8601(cls, s: str) -> Time: ...

class TimeDelta:
    def __init__(
        self,
        *,
        hours: float = 0,
        minutes: float = 0,
        seconds: float = 0,
        microseconds: int = 0,
    ) -> None: ...
    ZERO: ClassVar[TimeDelta]
    def in_hours(self) -> float: ...
    def in_minutes(self) -> float: ...
    def in_seconds(self) -> float: ...
    def in_microseconds(self) -> int: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: TimeDelta) -> bool: ...
    def __le__(self, other: TimeDelta) -> bool: ...
    def __gt__(self, other: TimeDelta) -> bool: ...
    def __ge__(self, other: TimeDelta) -> bool: ...
    def __bool__(self) -> bool: ...
    def __add__(self, other: TimeDelta) -> TimeDelta: ...
    def __sub__(self, other: TimeDelta) -> TimeDelta: ...
    def __mul__(self, other: float) -> TimeDelta: ...
    def __neg__(self) -> TimeDelta: ...
    def __pos__(self) -> TimeDelta: ...
    @overload
    def __truediv__(self, other: float) -> TimeDelta: ...
    @overload
    def __truediv__(self, other: TimeDelta) -> float: ...
    def __abs__(self) -> TimeDelta: ...
    def canonical_format(self) -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> TimeDelta: ...
    def common_iso8601(self) -> str: ...
    @classmethod
    def from_common_iso8601(cls, s: str) -> TimeDelta: ...
    def py_timedelta(self) -> _timedelta: ...
    @classmethod
    def from_py_timedelta(cls, td: _timedelta) -> TimeDelta: ...
    def as_tuple(self) -> tuple[int, int, int, int]: ...

class DateDelta:
    ZERO: ClassVar[DateDelta]
    def __init__(
        self, *, years: int = 0, months: int = 0, weeks: int = 0, days: int = 0
    ) -> None: ...
    @property
    def years(self) -> int: ...
    @property
    def months(self) -> int: ...
    @property
    def weeks(self) -> int: ...
    @property
    def days(self) -> int: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def replace(
        self,
        *,
        years: int | _UNSET = ...,
        months: int | _UNSET = ...,
        weeks: int | _UNSET = ...,
        days: int | _UNSET = ...,
    ) -> DateDelta: ...
    def __neg__(self) -> DateDelta: ...
    def __pos__(self) -> DateDelta: ...
    def __mul__(self, other: int) -> DateDelta: ...
    @overload
    def __add__(self, other: DateDelta) -> DateDelta: ...
    @overload
    def __add__(self, other: TimeDelta) -> DateTimeDelta: ...
    def __radd__(self, other: TimeDelta) -> DateTimeDelta: ...
    @overload
    def __sub__(self, other: DateDelta) -> DateDelta: ...
    @overload
    def __sub__(self, other: TimeDelta) -> DateTimeDelta: ...
    def __rsub__(self, other: TimeDelta) -> DateTimeDelta: ...
    def __abs__(self) -> DateDelta: ...
    def canonical_format(self) -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> DateDelta: ...
    def common_iso8601(self) -> str: ...
    @classmethod
    def from_common_iso8601(cls, s: str) -> DateDelta: ...
    def as_tuple(self) -> tuple[int, int, int, int]: ...

class DateTimeDelta:
    def __init__(
        self,
        *,
        years: int = 0,
        months: int = 0,
        weeks: int = 0,
        days: int = 0,
        hours: float = 0,
        minutes: float = 0,
        seconds: float = 0,
        microseconds: int = 0,
    ) -> None: ...
    ZERO: ClassVar[DateTimeDelta]
    @property
    def date_part(self) -> DateDelta: ...
    @property
    def time_part(self) -> TimeDelta: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __add__(self, other: Delta) -> DateTimeDelta: ...
    def __radd__(self, other: TimeDelta | DateDelta) -> DateTimeDelta: ...
    def __sub__(
        self, other: DateTimeDelta | TimeDelta | DateDelta
    ) -> DateTimeDelta: ...
    def __rsub__(self, other: TimeDelta | DateDelta) -> DateTimeDelta: ...
    def __mul__(self, other: int) -> DateTimeDelta: ...
    def __neg__(self) -> DateTimeDelta: ...
    def __pos__(self) -> DateTimeDelta: ...
    def __abs__(self) -> DateTimeDelta: ...
    def canonical_format(self) -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> DateTimeDelta: ...
    def common_iso8601(self) -> str: ...
    @classmethod
    def from_common_iso8601(cls, s: str) -> DateTimeDelta: ...
    def as_tuple(self) -> tuple[int, int, int, int, int, int, int, int]: ...

Delta = DateTimeDelta | TimeDelta | DateDelta

class _DateTime(ABC):
    @property
    def year(self) -> int: ...
    @property
    def month(self) -> int: ...
    @property
    def day(self) -> int: ...
    @property
    def hour(self) -> int: ...
    @property
    def minute(self) -> int: ...
    @property
    def second(self) -> int: ...
    @property
    def microsecond(self) -> int: ...
    def date(self) -> Date: ...
    def time(self) -> Time: ...
    @abstractmethod
    def canonical_format(self, sep: Literal[" ", "T"] = "T") -> str: ...
    @classmethod
    @abstractmethod
    def from_canonical_format(cls: _TDateTime, s: str) -> _TDateTime: ...
    @classmethod
    @abstractmethod
    def from_py_datetime(cls: _TDateTime, d: _datetime) -> _TDateTime: ...
    def py_datetime(self) -> _datetime: ...

class _AwareDateTime(_DateTime, metaclass=abc.ABCMeta):
    def timestamp(self) -> float: ...
    @property
    @abstractmethod
    def offset(self) -> TimeDelta: ...
    @abstractmethod
    def as_utc(self) -> UTCDateTime: ...
    @overload
    @abstractmethod
    def as_offset(self) -> OffsetDateTime: ...
    @overload
    @abstractmethod
    def as_offset(self, offset: int | TimeDelta) -> OffsetDateTime: ...
    def as_zoned(self, tz: str) -> ZonedDateTime: ...
    def as_local(self) -> LocalSystemDateTime: ...
    def naive(self) -> NaiveDateTime: ...
    @abstractmethod
    def __lt__(self, other: _AwareDateTime) -> bool: ...
    @abstractmethod
    def __le__(self, other: _AwareDateTime) -> bool: ...
    @abstractmethod
    def __gt__(self, other: _AwareDateTime) -> bool: ...
    @abstractmethod
    def __ge__(self, other: _AwareDateTime) -> bool: ...
    @abstractmethod
    def exact_eq(self: _TDateTime, other: _TDateTime) -> bool: ...

class UTCDateTime(_AwareDateTime):
    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        microsecond: int = 0,
    ) -> None: ...
    @classmethod
    def now(cls) -> UTCDateTime: ...
    def canonical_format(self, sep: Literal[" ", "T"] = "T") -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> UTCDateTime: ...
    @classmethod
    def from_timestamp(cls, i: float) -> UTCDateTime: ...
    @classmethod
    def from_py_datetime(cls, d: _datetime) -> UTCDateTime: ...
    offset: ClassVar[TimeDelta]
    def with_date(self, date: Date) -> UTCDateTime: ...
    def replace(
        self,
        *,
        year: int | _UNSET = ...,
        month: int | _UNSET = ...,
        day: int | _UNSET = ...,
        hour: int | _UNSET = ...,
        minute: int | _UNSET = ...,
        second: int | _UNSET = ...,
        microsecond: int | _UNSET = ...,
    ) -> UTCDateTime: ...
    MIN: ClassVar[UTCDateTime]
    MAX: ClassVar[UTCDateTime]
    def exact_eq(self, other: UTCDateTime) -> bool: ...
    def __lt__(self, other: _AwareDateTime) -> bool: ...
    def __le__(self, other: _AwareDateTime) -> bool: ...
    def __gt__(self, other: _AwareDateTime) -> bool: ...
    def __ge__(self, other: _AwareDateTime) -> bool: ...
    def add(
        self,
        *,
        years: int = 0,
        months: int = 0,
        weeks: int = 0,
        days: int = 0,
        hours: int = 0,
        minutes: int = 0,
        seconds: int = 0,
        microseconds: int = 0,
    ) -> UTCDateTime: ...
    def subtract(
        self,
        *,
        years: int = 0,
        months: int = 0,
        weeks: int = 0,
        days: int = 0,
        hours: int = 0,
        minutes: int = 0,
        seconds: int = 0,
        microseconds: int = 0,
    ) -> UTCDateTime: ...
    def __add__(self, delta: Delta) -> UTCDateTime: ...
    @overload
    def __sub__(self, other: _AwareDateTime) -> TimeDelta: ...
    @overload
    def __sub__(self, other: Delta) -> UTCDateTime: ...
    def as_utc(self) -> UTCDateTime: ...
    @overload
    def as_offset(self) -> OffsetDateTime: ...
    @overload
    def as_offset(self, offset: int | TimeDelta) -> OffsetDateTime: ...
    @classmethod
    def strptime(cls, s: str, fmt: str) -> UTCDateTime: ...
    def rfc2822(self) -> str: ...
    @classmethod
    def from_rfc2822(cls, s: str) -> UTCDateTime: ...
    def rfc3339(self) -> str: ...
    @classmethod
    def from_rfc3339(cls, s: str) -> UTCDateTime: ...
    def common_iso8601(self) -> str: ...
    @classmethod
    def from_common_iso8601(cls, s: str) -> UTCDateTime: ...

class OffsetDateTime(_AwareDateTime):
    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        microsecond: int = 0,
        *,
        offset: int | TimeDelta,
    ) -> None: ...
    @classmethod
    def now(cls, offset: int | TimeDelta) -> OffsetDateTime: ...
    def canonical_format(self, sep: Literal[" ", "T"] = "T") -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> OffsetDateTime: ...
    @classmethod
    def from_timestamp(
        cls, i: float, offset: int | TimeDelta
    ) -> OffsetDateTime: ...
    @classmethod
    def from_py_datetime(cls, d: _datetime) -> OffsetDateTime: ...
    def replace(
        self,
        *,
        year: int | _UNSET = ...,
        month: int | _UNSET = ...,
        day: int | _UNSET = ...,
        hour: int | _UNSET = ...,
        minute: int | _UNSET = ...,
        second: int | _UNSET = ...,
        microsecond: int | _UNSET = ...,
        offset: int | TimeDelta | _UNSET = ...,
    ) -> OffsetDateTime: ...
    @property
    def offset(self) -> TimeDelta: ...
    def exact_eq(self, other: OffsetDateTime) -> bool: ...
    def __lt__(self, other: _AwareDateTime) -> bool: ...
    def __le__(self, other: _AwareDateTime) -> bool: ...
    def __gt__(self, other: _AwareDateTime) -> bool: ...
    def __ge__(self, other: _AwareDateTime) -> bool: ...
    def __sub__(self, other: _AwareDateTime) -> TimeDelta: ...
    def as_utc(self) -> UTCDateTime: ...
    @overload
    def as_offset(self) -> OffsetDateTime: ...
    @overload
    def as_offset(self, offset: int | TimeDelta) -> OffsetDateTime: ...
    @classmethod
    def strptime(cls, s: str, fmt: str) -> OffsetDateTime: ...
    def rfc2822(self) -> str: ...
    @classmethod
    def from_rfc2822(cls, s: str) -> OffsetDateTime: ...
    def rfc3339(self) -> str: ...
    @classmethod
    def from_rfc3339(cls, s: str) -> OffsetDateTime: ...
    def common_iso8601(self) -> str: ...
    @classmethod
    def from_common_iso8601(cls, s: str) -> OffsetDateTime: ...

class ZonedDateTime(_AwareDateTime):
    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        microsecond: int = 0,
        *,
        tz: str,
        disambiguate: Disambiguate = "raise",
    ) -> None: ...
    @classmethod
    def now(cls, tz: str) -> ZonedDateTime: ...
    def canonical_format(self, sep: Literal[" ", "T"] = "T") -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> ZonedDateTime: ...
    @classmethod
    def from_timestamp(cls, i: float, tz: str) -> ZonedDateTime: ...
    @classmethod
    def from_py_datetime(cls, d: _datetime) -> ZonedDateTime: ...
    def with_date(
        self, date: Date, disambiguate: Disambiguate = "raise"
    ) -> ZonedDateTime: ...
    def replace(
        self,
        *,
        year: int | _UNSET = ...,
        month: int | _UNSET = ...,
        day: int | _UNSET = ...,
        hour: int | _UNSET = ...,
        minute: int | _UNSET = ...,
        second: int | _UNSET = ...,
        microsecond: int | _UNSET = ...,
        tz: str | _UNSET = ...,
        disambiguate: Disambiguate | _UNSET = ...,
    ) -> ZonedDateTime: ...
    @property
    def tz(self) -> str: ...
    @property
    def offset(self) -> TimeDelta: ...
    def __hash__(self) -> int: ...
    def exact_eq(self, other: ZonedDateTime) -> bool: ...
    def __lt__(self, other: _AwareDateTime) -> bool: ...
    def __le__(self, other: _AwareDateTime) -> bool: ...
    def __gt__(self, other: _AwareDateTime) -> bool: ...
    def __ge__(self, other: _AwareDateTime) -> bool: ...
    def __add__(self, delta: Delta) -> ZonedDateTime: ...
    @overload
    def __sub__(self, other: _AwareDateTime) -> TimeDelta: ...
    @overload
    def __sub__(self, other: Delta) -> ZonedDateTime: ...
    def is_ambiguous(self) -> bool: ...
    def as_utc(self) -> UTCDateTime: ...
    @overload
    def as_offset(self) -> OffsetDateTime: ...
    @overload
    def as_offset(self, offset: int | TimeDelta) -> OffsetDateTime: ...
    def as_zoned(self, tz: str) -> ZonedDateTime: ...

class LocalSystemDateTime(_AwareDateTime):
    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        microsecond: int = 0,
        *,
        disambiguate: Disambiguate = "raise",
    ) -> None: ...
    @classmethod
    def now(cls) -> LocalSystemDateTime: ...
    def canonical_format(self, sep: Literal[" ", "T"] = "T") -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> LocalSystemDateTime: ...
    @classmethod
    def from_timestamp(cls, i: float) -> LocalSystemDateTime: ...
    @classmethod
    def from_py_datetime(cls, d: _datetime) -> LocalSystemDateTime: ...
    @property
    def offset(self) -> TimeDelta: ...
    @property
    def tzname(self) -> str: ...
    def __lt__(self, other: _AwareDateTime) -> bool: ...
    def __le__(self, other: _AwareDateTime) -> bool: ...
    def __gt__(self, other: _AwareDateTime) -> bool: ...
    def __ge__(self, other: _AwareDateTime) -> bool: ...
    def exact_eq(self, other: LocalSystemDateTime) -> bool: ...
    def replace(
        self,
        *,
        year: int | _UNSET = ...,
        month: int | _UNSET = ...,
        day: int | _UNSET = ...,
        hour: int | _UNSET = ...,
        minute: int | _UNSET = ...,
        second: int | _UNSET = ...,
        microsecond: int | _UNSET = ...,
        disambiguate: Disambiguate | _UNSET = ...,
    ) -> LocalSystemDateTime: ...
    def __add__(self, delta: Delta) -> LocalSystemDateTime: ...
    @overload
    def __sub__(self, other: _AwareDateTime) -> TimeDelta: ...
    @overload
    def __sub__(self, other: Delta) -> LocalSystemDateTime: ...
    def as_utc(self) -> UTCDateTime: ...
    @overload
    def as_offset(self) -> OffsetDateTime: ...
    @overload
    def as_offset(self, offset: int | TimeDelta) -> OffsetDateTime: ...
    def as_zoned(self, tz: str) -> ZonedDateTime: ...
    def as_local(self) -> LocalSystemDateTime: ...

class NaiveDateTime(_DateTime):
    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        microsecond: int = 0,
    ) -> None: ...
    def canonical_format(self, sep: Literal[" ", "T"] = "T") -> str: ...
    @classmethod
    def from_canonical_format(cls, s: str) -> NaiveDateTime: ...
    @classmethod
    def from_py_datetime(cls, d: _datetime) -> NaiveDateTime: ...
    tzinfo: ClassVar[None]
    def replace(
        self,
        *,
        year: int | _UNSET = ...,
        month: int | _UNSET = ...,
        day: int | _UNSET = ...,
        hour: int | _UNSET = ...,
        minute: int | _UNSET = ...,
        second: int | _UNSET = ...,
        microsecond: int | _UNSET = ...,
    ) -> NaiveDateTime: ...
    MIN: ClassVar[NaiveDateTime]
    MAX: ClassVar[NaiveDateTime]
    def __lt__(self, other: NaiveDateTime) -> bool: ...
    def __le__(self, other: NaiveDateTime) -> bool: ...
    def __gt__(self, other: NaiveDateTime) -> bool: ...
    def __ge__(self, other: NaiveDateTime) -> bool: ...
    def __add__(self, delta: Delta) -> NaiveDateTime: ...
    @overload
    def __sub__(self, other: NaiveDateTime) -> TimeDelta: ...
    @overload
    def __sub__(self, other: Delta) -> NaiveDateTime: ...
    @classmethod
    def strptime(cls, s: str, fmt: str) -> NaiveDateTime: ...
    def assume_utc(self) -> UTCDateTime: ...
    def assume_offset(self, offset: int | TimeDelta) -> OffsetDateTime: ...
    def assume_zoned(
        self, tz: str, disambiguate: Disambiguate = "raise"
    ) -> ZonedDateTime: ...
    def assume_local(
        self, disambiguate: Disambiguate = "raise"
    ) -> LocalSystemDateTime: ...
    def common_iso8601(self) -> str: ...
    @classmethod
    def from_common_iso8601(cls, s: str) -> NaiveDateTime: ...

class AmbiguousTime(Exception):
    @staticmethod
    def for_timezone(d: _datetime, tz: ZoneInfo) -> AmbiguousTime: ...
    @staticmethod
    def for_system_timezone(d: _datetime) -> AmbiguousTime: ...

class SkippedTime(Exception):
    @staticmethod
    def for_timezone(d: _datetime, tz: ZoneInfo) -> SkippedTime: ...
    @staticmethod
    def for_system_timezone(d: _datetime) -> SkippedTime: ...

class InvalidOffsetForZone(ValueError): ...
class InvalidFormat(ValueError): ...

def years(i: int) -> DateDelta: ...
def months(i: int) -> DateDelta: ...
def weeks(i: int) -> DateDelta: ...
def days(i: int) -> DateDelta: ...
def hours(i: float) -> TimeDelta: ...
def minutes(i: float) -> TimeDelta: ...
def seconds(i: float) -> TimeDelta: ...
def microseconds(i: int) -> TimeDelta: ...
